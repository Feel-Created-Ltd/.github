# yamllint disable-line rule:document-start
name: deploy

on:
  workflow_call:
    inputs:
      BEDROCK_DEPLOY_BRANCH:
        type: string
        default: "${{ github.ref_name }}"
        required: false
      NODE_VERSION:
        type: number
        default: 14
        required: false
      THEME_NAME:
        type: string
        default: ""
        required: false
      TRELLIS_ENVIRONMENT:
        type: string
        required: true
      TRELLIS_REPOSITORY:
        type: string
        required: true
      TRELLIS_CLI_AUTO_INIT:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_CACHE_VIRTUALENV:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_GALAXY_INSTALL:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_VERSION:
        type: string
        default: latest
        required: false
    secrets:
      REPO_PAT:
        required: true
      TRELLIS_DEPLOY_SSH_PRIVATE_KEY:
        required: true
      TRELLIS_BEDROCK_SSH_PRIVATE_KEY:
        required: false
      TRELLIS_DEPLOY_SSH_KNOWN_HOSTS:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false
      ITINERIS_NPM_AUTH_TOKEN:
        required: false

jobs:
  deploy:
    name: "${{ inputs.TRELLIS_ENVIRONMENT }}"
    runs-on: ubuntu-latest
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref_name }}"
      cancel-in-progress: false
    if: github.sha != vars.LAST_DEPLOY && github.actor != 'kodiakhq[bot]' && github.actor != 'dependabot[bot]' && !contains(github.event.head_commit.message, '[cd skip]')

    steps:
      # Checkout Trellis repository
      - name: Checkout Trellis
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.TRELLIS_REPOSITORY }}"
          path: trellis
          token: "${{ secrets.REPO_PAT }}"

      # Extract host IP from Trellis hosts file
      - name: Get environment IP address
        run: |
          HOST_IP="$(grep -Eo 'ansible_host=[0-9]{1,3}(\.[0-9]{1,3}){3}' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}" | sed 's/ansible_host=//g')"
          if [ -z "${HOST_IP}" ]; then
            echo 'HOST_IP not found.'
            exit 1
          fi
          echo "HOST_IP=${HOST_IP}" >> "${GITHUB_ENV}"
        working-directory: trellis

       # Extract host port from Trellis hosts file
      - name: Get environment Port address
        run: |
          KINSTA_PORT="$(grep -Eo 'ansible_port=[0-9]+' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}" | sed 's/ansible_port=//g')"
          if [ -z "${KINSTA_PORT}" ]; then
            echo 'KINSTA_PORT not found.'
            exit 1
          fi
          echo "KINSTA_PORT=${KINSTA_PORT}" >> "${GITHUB_ENV}"
        working-directory: trellis

      # Checkout Bedrock repository
      - name: Checkout Bedrock
        uses: actions/checkout@v4
        with:
          path: bedrock

      # Setup Node.js for theme build
      - name: Setup Node ${{ inputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        if: "${{ inputs.THEME_NAME != '' }}"
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: yarn
          cache-dependency-path: bedrock/web/app/themes/${{ inputs.THEME_NAME }}/yarn.lock
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}

       # Update SSH known_hosts for Kinsta
      - name: Update SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          # Remove any old fingerprints to avoid "REMOTE HOST IDENTIFICATION HAS CHANGED!"
          ssh-keygen -R "[${HOST_IP}]:${KINSTA_PORT}" || true
          # Add the latest fingerprint
          ssh-keyscan -p ${KINSTA_PORT} ${HOST_IP} > ~/.ssh/known_hosts

  env:
    HOST_IP: ${{ env.HOST_IP }}
    KINSTA_PORT: ${{ env.KINSTA_PORT }}

      # Add Trellis deploy key
      - name: Add Trellis deploy key
        uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"
          known_hosts: "${{ secrets.TRELLIS_DEPLOY_SSH_KNOWN_HOSTS }}"

      # Start ssh-agent for Trellis deploy key
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"

      # Add optional Bedrock deploy key
      - name: Add optional Bedrock deploy key
        run: |
          if [ -n "${TRELLIS_BEDROCK_SSH_PRIVATE_KEY}" ]; then
            echo "${TRELLIS_BEDROCK_SSH_PRIVATE_KEY}" > /tmp/bedrock_key
            chmod 600 /tmp/bedrock_key
            ssh-add /tmp/bedrock_key
          fi
        env:
          TRELLIS_BEDROCK_SSH_PRIVATE_KEY: ${{ secrets.TRELLIS_BEDROCK_SSH_PRIVATE_KEY }}

      # Setup Trellis CLI
      - uses: roots/setup-trellis-cli@v1.3.1
        with:
          ansible-vault-password: "${{ secrets.ANSIBLE_VAULT_PASSWORD }}"
          auto-init: "${{ inputs.TRELLIS_CLI_AUTO_INIT }}"
          cache-virtualenv: "${{ inputs.TRELLIS_CLI_CACHE_VIRTUALENV }}"
          galaxy-install: "${{ inputs.TRELLIS_CLI_GALAXY_INSTALL }}"
          version: "${{ inputs.TRELLIS_CLI_VERSION }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Configure Trellis CLI
      - name: Configure Trellis CLI
        run: |
          mkdir -p ~/.trellis-cli
          echo "allow_development_deploys: true" > ~/.trellis-cli/config.yml

      # Deploy to remote environment with Kinsta PHP prepend disabled
      - name: Deploy
        working-directory: trellis
        run: |
          export KINSTA_PHP_PREPEND=''
          trellis deploy --verbose --branch="${{ inputs.BEDROCK_DEPLOY_BRANCH }}" "${{ inputs.TRELLIS_ENVIRONMENT }}"
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}
          ALLOW_DEVELOPMENT_DEPLOYS: true

      # Cache last deployed commit
      - name: Cache deployed commit hash
        run: gh variable set LAST_DEPLOY --body='${{ github.sha }}'
        working-directory: bedrock
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }} 
