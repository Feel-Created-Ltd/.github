# .github/workflows/trellis-deploy.yml
name: deploy

on:
  workflow_call:
    inputs:
      BEDROCK_DEPLOY_BRANCH:
        type: string
        default: "${{ github.ref_name }}"
        required: false
      NODE_VERSION:
        type: number
        default: 14
        required: false
      THEME_NAME:
        type: string
        default: ""
        required: false
      TRELLIS_ENVIRONMENT:
        type: string
        required: true
      TRELLIS_REPOSITORY:
        type: string
        required: true
      TRELLIS_CLI_AUTO_INIT:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_CACHE_VIRTUALENV:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_GALAXY_INSTALL:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_VERSION:
        type: string
        default: latest
        required: false
    secrets:
      REPO_PAT:
        required: true
      TRELLIS_DEPLOY_SSH_PRIVATE_KEY:
        required: true
      TRELLIS_DEPLOY_SSH_KNOWN_HOSTS:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      ZEROTIER_CENTRAL_TOKEN:
        required: true
      ZEROTIER_NETWORK_ID:
        required: true
      ZEROTIER_GATEWAY_IP:
        required: true

jobs:
  deploy:
    name: "${{ inputs.TRELLIS_ENVIRONMENT }}"
    runs-on: ubuntu-latest

    steps:
      # Checkout Trellis
      - name: Checkout Trellis
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.TRELLIS_REPOSITORY }}"
          path: trellis
          token: "${{ secrets.REPO_PAT }}"
          ref: "${{ inputs.TRELLIS_ENVIRONMENT }}"

      # Get target host IP from hosts file
      - name: Get target host IP
        run: |
          HOST_IP=$(grep -Po 'ansible_host=\K\S+' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}")
          if [ -z "$HOST_IP" ]; then
            echo "HOST_IP not found"
            exit 1
          fi
          echo "HOST_IP=$HOST_IP" >> "$GITHUB_ENV"
        working-directory: trellis

      # Install and join ZeroTier
      - name: Install ZeroTier
        uses: zerotier/github-action@v1.0.3
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}

      # Verify ZeroTier connectivity
      - name: Verify ZeroTier IP
        run: |
          ZT_IP=$(ip -4 addr show | grep -oP '192\.168\.196\.\d+')
          if [ -z "$ZT_IP" ]; then
            echo "❌ Runner not on ZeroTier network!"
            exit 1
          fi
          echo "✅ Runner ZeroTier IP: $ZT_IP"

      # Test connectivity to jump host
      - name: Ping jump host
        run: |
          if ! ping -c 3 192.168.196.90; then
            echo "❌ Cannot reach jump host!"
            exit 1
          fi
          echo "✅ Jump host reachable"

      # Test connectivity to Kinsta through jump host
      - name: Test SSH to target via jump host
        run: |
          if ! ssh -o BatchMode=yes -J chiuni@192.168.196.90 chiuni@$HOST_IP -p 56751 "echo connected"; then
            echo "❌ Cannot reach Kinsta server via jump host!"
            exit 1
          fi
          echo "✅ Kinsta server reachable via jump host"

      # Checkout Bedrock
      - name: Checkout Bedrock
        uses: actions/checkout@v4
        with:
          path: bedrock

      # Setup Node
      - name: Setup Node ${{ inputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        if: "${{ inputs.THEME_NAME != '' }}"
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: yarn
          cache-dependency-path: bedrock/web/app/themes/${{ inputs.THEME_NAME }}/yarn.lock

      # Setup SSH for Trellis
      - name: Setup SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"
          known_hosts: "${{ secrets.TRELLIS_DEPLOY_SSH_KNOWN_HOSTS }}"

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"

      # Setup Trellis CLI
      - uses: roots/setup-trellis-cli@v1.3.1
        with:
          ansible-vault-password: "${{ secrets.ANSIBLE_VAULT_PASSWORD }}"
          auto-init: "${{ inputs.TRELLIS_CLI_AUTO_INIT }}"
          cache-virtualenv: "${{ inputs.TRELLIS_CLI_CACHE_VIRTUALENV }}"
          galaxy-install: "${{ inputs.TRELLIS_CLI_GALAXY_INSTALL }}"
          version: "${{ inputs.TRELLIS_CLI_VERSION }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Deploy
      - name: Deploy
        working-directory: trellis
        run: trellis deploy --verbose --branch="${{ inputs.BEDROCK_DEPLOY_BRANCH }}" "${{ inputs.TRELLIS_ENVIRONMENT }}"
