# .github/workflows/trellis-deploy-development.yml
name: deploy

on:
  workflow_call:
    inputs:
      BEDROCK_DEPLOY_BRANCH:
        type: string
        default: "${{ github.ref_name }}"
        required: false
      NODE_VERSION:
        type: number
        default: 14
        required: false
      THEME_NAME:
        type: string
        default: ""
        required: false
      TRELLIS_ENVIRONMENT:
        type: string
        required: true
      TRELLIS_REPOSITORY:
        type: string
        required: true
      TRELLIS_CLI_AUTO_INIT:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_CACHE_VIRTUALENV:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_GALAXY_INSTALL:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_VERSION:
        type: string
        default: latest
        required: false
    secrets:
      REPO_PAT:
        required: true
      TRELLIS_DEPLOY_SSH_PRIVATE_KEY:
        required: true
      TRELLIS_DEPLOY_SSH_KNOWN_HOSTS:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      VPS_SSH_PRIVATE_KEY:
        required: true
      ZEROTIER_NETWORK_ID:
        required: true
      ZEROTIER_CENTRAL_TOKEN:
        required: true
      ZEROTIER_GATEWAY_IP:
        required: true
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false
      ITINERIS_NPM_AUTH_TOKEN:
        required: false

jobs:
  deploy:
    name: "${{ inputs.TRELLIS_ENVIRONMENT }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Trellis
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.TRELLIS_REPOSITORY }}"
          path: trellis
          token: "${{ secrets.REPO_PAT }}"

      - name: Get environment IP and port
        run: |
          HOST_IP=$(grep -Eo 'ansible_host=[0-9]{1,3}(\.[0-9]{1,3}){3}' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}" | sed 's/ansible_host=//')
          KINSTA_PORT=$(grep -Eo 'ansible_port=[0-9]+' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}" | sed 's/ansible_port=//')
          echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
          echo "KINSTA_PORT=$KINSTA_PORT" >> $GITHUB_ENV
        working-directory: trellis

      - name: Checkout Bedrock
        uses: actions/checkout@v4
        with:
          path: bedrock

      - name: Setup Node ${{ inputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        if: "${{ inputs.THEME_NAME != '' }}"
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: yarn
          cache-dependency-path: bedrock/web/app/themes/${{ inputs.THEME_NAME }}/yarn.lock
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}

      - name: Setup SSH for VPS
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: "${{ secrets.VPS_SSH_PRIVATE_KEY }}"

      - name: Install ZeroTier on VPS and join network
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.HOST_IP }} <<'EOF'
            curl -s https://install.zerotier.com | bash
            zerotier-cli join $ZEROTIER_NETWORK_ID
            ip route add ${HOST_IP}/32 via $ZEROTIER_GATEWAY_IP
          EOF
        env:
          HOST_IP: ${{ env.HOST_IP }}
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_GATEWAY_IP: ${{ secrets.ZEROTIER_GATEWAY_IP }}

      - name: Setup SSH for Trellis deploy key
        uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"
          known_hosts: "${{ secrets.TRELLIS_DEPLOY_SSH_KNOWN_HOSTS }}"

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"

      - uses: roots/setup-trellis-cli@v1.3.1
        with:
          ansible-vault-password: "${{ secrets.ANSIBLE_VAULT_PASSWORD }}"
          auto-init: "${{ inputs.TRELLIS_CLI_AUTO_INIT }}"
          cache-virtualenv: "${{ inputs.TRELLIS_CLI_CACHE_VIRTUALENV }}"
          galaxy-install: "${{ inputs.TRELLIS_CLI_GALAXY_INSTALL }}"
          version: "${{ inputs.TRELLIS_CLI_VERSION }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy via Trellis on VPS
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.HOST_IP }} <<'EOF'
            export KINSTA_PHP_PREPEND=''
            cd trellis
            trellis deploy --verbose --branch="${{ inputs.BEDROCK_DEPLOY_BRANCH }}" "${{ inputs.TRELLIS_ENVIRONMENT }}"
          EOF
        env:
          HOST_IP: ${{ env.HOST_IP }}
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}

      - name: Cache deployed commit hash
        run: gh variable set LAST_DEPLOY --body='${{ github.sha }}'
        working-directory: bedrock
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
