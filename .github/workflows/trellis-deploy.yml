# .github/workflows/trellis-deploy-development.yml
name: deploy

on:
  workflow_call:
    inputs:
      BEDROCK_DEPLOY_BRANCH:
        type: string
        default: "${{ github.ref_name }}"
        required: false
      NODE_VERSION:
        type: number
        default: 14
        required: false
      THEME_NAME:
        type: string
        default: ""
        required: false
      TRELLIS_ENVIRONMENT:
        type: string
        required: true
      TRELLIS_REPOSITORY:
        type: string
        required: true
      TRELLIS_CLI_AUTO_INIT:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_CACHE_VIRTUALENV:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_GALAXY_INSTALL:
        type: boolean
        default: true
        required: false
      TRELLIS_CLI_VERSION:
        type: string
        default: latest
        required: false
    secrets:
      REPO_PAT:
        required: true
      TRELLIS_DEPLOY_SSH_PRIVATE_KEY:
        required: true
      TRELLIS_DEPLOY_SSH_KNOWN_HOSTS:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false
      ITINERIS_NPM_AUTH_TOKEN:
        required: false
      ZEROTIER_CENTRAL_TOKEN:
        required: true
      ZEROTIER_GATEWAY_IP:
        required: true
      ZEROTIER_NETWORK_ID:
        required: true

jobs:
  deploy:
    name: "${{ inputs.TRELLIS_ENVIRONMENT }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Trellis
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.TRELLIS_REPOSITORY }}"
          path: trellis
          token: "${{ secrets.REPO_PAT }}"
          ref: "${{ inputs.TRELLIS_ENVIRONMENT }}"

      - name: Get environment IP address
        working-directory: trellis
        run: |
          HOST_IP="$(grep -Po 'ansible_host=((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}' "hosts/${{ inputs.TRELLIS_ENVIRONMENT }}" | sed 's/ansible_host=//g')"
          if [ -z "${HOST_IP}" ]; then
            echo 'HOST_IP not found.'
            exit 1
          fi
          echo "HOST_IP=${HOST_IP}" >> "${GITHUB_ENV}"

      - name: Install ZeroTier
        uses: zerotier/github-action@v1.0.3
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}

      - name: Verify ZeroTier connectivity
        run: |
          echo "Checking ZeroTier membership..."
          OUT=$(sudo zerotier-cli listnetworks -j)
          echo "$OUT" | jq .
          STATUS=$(echo "$OUT" | jq -r '.[0].status')
          ADDR=$(echo "$OUT" | jq -r '.[0].assignedAddresses[0]')
          if [ "$STATUS" != "OK" ]; then
            echo "❌ Runner is not connected to ZeroTier!"
            exit 1
          fi
          echo "✅ Runner ZeroTier address: $ADDR"

      - name: Route traffic to target host via ZeroTier
        run: |
          echo "Adding route to target host ${{ env.HOST_IP }} via ZeroTier gateway..."
          sudo ip route add "${{ env.HOST_IP }}/32" via "${{ secrets.ZEROTIER_GATEWAY_IP }}" || true

      - name: Test connectivity to Jump and Target hosts
        run: |
          echo "Testing jump host 192.168.196.201..."
          if ! ping -c 1 -W 2 192.168.196.201; then
            echo "❌ Cannot reach jump host!"
            exit 1
          fi
          echo "✅ Jump host reachable"

          echo "Testing target host ${{ env.HOST_IP }}..."
          if ! ping -c 1 -W 2 ${{ env.HOST_IP }}; then
            echo "❌ Cannot reach target host!"
            exit 1
          fi
          echo "✅ Target host reachable"

      - name: Checkout Bedrock
        uses: actions/checkout@v4
        with:
          path: bedrock

      - name: Setup Node ${{ inputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        if: "${{ inputs.THEME_NAME != '' }}"
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: yarn
          cache-dependency-path: bedrock/web/app/themes/${{ inputs.THEME_NAME }}/yarn.lock
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}

      - uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"
          known_hosts: "${{ secrets.TRELLIS_DEPLOY_SSH_KNOWN_HOSTS }}"

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: "${{ secrets.TRELLIS_DEPLOY_SSH_PRIVATE_KEY }}"

      - uses: roots/setup-trellis-cli@v1.3.1
        with:
          ansible-vault-password: "${{ secrets.ANSIBLE_VAULT_PASSWORD }}"
          auto-init: "${{ inputs.TRELLIS_CLI_AUTO_INIT }}"
          cache-virtualenv: "${{ inputs.TRELLIS_CLI_CACHE_VIRTUALENV }}"
          galaxy-install: "${{ inputs.TRELLIS_CLI_GALAXY_INSTALL }}"
          version: "${{ inputs.TRELLIS_CLI_VERSION }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy
        working-directory: trellis
        run: trellis deploy --verbose --branch="${{ inputs.BEDROCK_DEPLOY_BRANCH }}" "${{ inputs.TRELLIS_ENVIRONMENT }}"
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          ITINERIS_NPM_AUTH_TOKEN: ${{ secrets.ITINERIS_NPM_AUTH_TOKEN }}

      - name: Cache deployed commit hash
        working-directory: bedrock
        run: gh variable set LAST_DEPLOY --body='${{ github.sha }}'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
